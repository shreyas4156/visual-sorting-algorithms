[{"C:\\Users\\Shreyas\\Desktop\\React\\sorting-visualization\\src\\reportWebVitals.js":"1","C:\\Users\\Shreyas\\Desktop\\React\\sorting-visualization\\src\\Footer.jsx":"2","C:\\Users\\Shreyas\\Desktop\\React\\sorting-visualization\\src\\index.js":"3","C:\\Users\\Shreyas\\Desktop\\React\\sorting-visualization\\src\\SortingVisualizer\\body\\Body.jsx":"4","C:\\Users\\Shreyas\\Desktop\\React\\sorting-visualization\\src\\App.js":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":604,"mtime":1606244265285,"results":"8","hashOfConfig":"7"},{"size":542,"mtime":1606152958756,"results":"9","hashOfConfig":"7"},{"size":6912,"mtime":1606245042827,"results":"10","hashOfConfig":"7"},{"size":524,"mtime":1606244161219,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zhq7vo",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\Shreyas\\Desktop\\React\\sorting-visualization\\src\\reportWebVitals.js",[],"C:\\Users\\Shreyas\\Desktop\\React\\sorting-visualization\\src\\Footer.jsx",[],"C:\\Users\\Shreyas\\Desktop\\React\\sorting-visualization\\src\\index.js",[],["25","26"],"C:\\Users\\Shreyas\\Desktop\\React\\sorting-visualization\\src\\SortingVisualizer\\body\\Body.jsx",["27"],"import React,{useEffect, useState} from 'react';\r\nimport { QuickSort } from '../../Algorithms/QuickSort';\r\nimport * as H from './../../Algorithms/MergeSort';\r\nimport Header from './../../Header';\r\nimport './Main.css';\r\nimport {Jumbotron, Container} from 'reactstrap'\r\nimport BubbleSort from './../../Algorithms/BubbleSort';\r\nimport { Footer } from '../../Footer';\r\n\r\nfunction Body({match}) {\r\n    const [array, setArray] = useState([]);\r\n    const numWidth = Math.floor(window.innerWidth*5 / (array.length * 10));\r\n    const width = `${numWidth}px`;\r\n    const [size,setSize] = useState(20);\r\n    const [algo,setAlgo] = useState(null);\r\n    const quick = {\r\n        name:\"Quick Sort\",\r\n        best:\"Best Case: O(n Logn)\",\r\n        worst: \"Worst Case: O(n^2)\",\r\n        average: \"Average Case: O(n Logn)\"\r\n    }\r\n    const merge = {\r\n        name:\"Merge Sort\",\r\n        best:\"Best Case: O(n Logn)\",\r\n        worst: \"Worst Case: O(n Logn)\",\r\n        average: \"Average Case: O(n Logn)\"\r\n    }\r\n    const bubble = {\r\n        name:\"Bubble Sort\",\r\n        best:\"Best Case: O(n)\",\r\n        worst: \"Worst Case: O(n^2)\",\r\n        average: \"Average Case: O(n^2)\"\r\n    }\r\n    const primary = \"blueviolet\";\r\n    const secondary = \"#34FF07\";\r\n    const animations_speed = size>=10 && size<=30 \r\n                                ? 40\r\n                                : size>30 && size<=50\r\n                                    ?15\r\n                                    :10;\r\n\r\n    useEffect(()=>{\r\n        resetArray();\r\n    },[])\r\n\r\n     // for generating new array\r\n     const resetArray = ()=>{\r\n        let array = [];\r\n        for(let i=0;i<size;i++)\r\n            array.push(Math.floor(Math.random()*1000)+5);\r\n        setArray(array);\r\n         }\r\n\r\n\r\n\r\n     //merge sort\r\n      const mergeSort = ()=>{\r\n        const animations = H.MergeSort(array);\r\n        const arrayBars = document.getElementsByClassName(\"array-bars\");\r\n        for(let i=0;i<animations.length;i++)\r\n        {\r\n            const colorChange = i%3 !== 2;\r\n\r\n            if(colorChange)\r\n            {\r\n                const [barOne, barTwo] = animations[i];\r\n                let color = i%3 ===0 ? secondary : primary;\r\n                let barStyleOne = arrayBars[barOne].style;\r\n                let barStyleTwo = arrayBars[barTwo].style;\r\n                setTimeout(()=>{\r\n                    barStyleOne.backgroundColor = color;\r\n                    barStyleTwo.backgroundColor = color;\r\n                }, i*animations_speed)  \r\n            }\r\n            else \r\n            {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight/3}px`;\r\n                  }, i*animations_speed);\r\n            }\r\n        }\r\n\r\n     }\r\n\r\n\r\n     //quick sort\r\n     const quickSort = ()=>{\r\n         const animations = QuickSort(array);\r\n         for(let i=0;i<animations.length;i++)\r\n         {\r\n            const[barOne, barTwo, changeColor] = animations[i];\r\n            const arrayBar = document.getElementsByClassName(\"array-bars\");\r\n            if(changeColor.color)\r\n            {\r\n                let color = changeColor.color===1 ? secondary : primary;\r\n                let barOneStyle = arrayBar[barOne].style;\r\n                let barTwoStyle = arrayBar[barTwo].style;\r\n                setTimeout(()=>{\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i*animations_speed);\r\n            }\r\n            else {\r\n                let barOneStyle = arrayBar[barOne].style;\r\n                setTimeout(()=>{\r\n                    barOneStyle.height = `${barTwo/3}px`;\r\n                }, i*animations_speed);\r\n            }\r\n\r\n        }\r\n     }\r\n\r\n\r\n     //Bubble Sort\r\n     const bubbleSort = ()=>{\r\n        const animations = BubbleSort(array);\r\n        for(let i=0;i<animations.length;i++)\r\n        {\r\n           const[barOne, barTwo, changeColor] = animations[i];\r\n           const arrayBar = document.getElementsByClassName(\"array-bars\");\r\n           if(changeColor!==0)\r\n           {\r\n               let color = changeColor===1 ? secondary : primary;\r\n               let barOneStyle = arrayBar[barOne].style;\r\n               let barTwoStyle = arrayBar[barTwo].style;\r\n               setTimeout(()=>{\r\n                   barOneStyle.backgroundColor = color;\r\n                   barTwoStyle.backgroundColor = color;\r\n               }, i*animations_speed);\r\n           }\r\n           else {\r\n               let barOneStyle = arrayBar[barOne].style;\r\n               setTimeout(()=>{\r\n                   barOneStyle.height = `${barTwo/3}px`;\r\n               }, i*animations_speed);\r\n           }\r\n\r\n       }\r\n    }\r\n\r\n\r\n     const sorts = (algo)=>{\r\n        if(algo===\"merge\") \r\n            mergeSort();    \r\n        else if(algo===\"quick\")\r\n            quickSort();\r\n        else if(algo === \"bubble\")\r\n            bubbleSort();\r\n       \r\n     }\r\n\r\n     const handleValue = (value)=>{\r\n        setSize(value);\r\n        resetArray();\r\n     }\r\n     const handleChange = (algo) => {\r\n        setAlgo(algo);\r\n     }\r\n    return(\r\n        <React.Fragment>\r\n        <Header sort={sorts} resetArray={resetArray} match={match} valueChange= {handleValue} changeAlgo={handleChange}/>\r\n                <main>\r\n                <div className=\"containe\" style={{marginTop:\"2px\"}}>\r\n                {\r\n                    array.map((val, indx)=>(\r\n                        <div \r\n                        className=\"array-bars\" \r\n                        key={indx}\r\n                        style={{\r\n                            height: `${val/3}px`,\r\n                            width: width,\r\n                        }}\r\n                        >\r\n                </div>\r\n                        \r\n                    ))\r\n                }\r\n                <hr />\r\n                </div>\r\n                {\r\n                    algo===\"merge\" || algo===\"quick\" || algo===\"bubble\" ?\r\n                    <Jumbotron style={{textAlign:\"center\", backgroundColor:\"#8E8E8E\"}} fluid>\r\n                    <Container fluid>\r\n                      <h1 className=\"display-3\">{algo===\"merge\"? merge.name : algo===\"quick\"? quick.name: bubble.name}</h1>\r\n                      <p className=\"lead\">{algo===\"merge\"? merge.best : algo===\"quick\"? quick.best: bubble.best}</p>\r\n                      <p className=\"lead\">{algo===\"merge\"? merge.average : algo===\"quick\"? quick.average: bubble.average}</p>\r\n                      <p className=\"lead\">{algo===\"merge\"? merge.average : algo===\"quick\"? quick.average: bubble.average}</p>\r\n                    </Container>\r\n                  </Jumbotron>: null\r\n                }\r\n                </main>\r\n                <Footer />\r\n            </React.Fragment>\r\n    )\r\n}\r\nexport default Body;","C:\\Users\\Shreyas\\Desktop\\React\\sorting-visualization\\src\\App.js",["28"],"import React from 'react';\nimport { BrowserRouter, Redirect, Route, Router, Switch } from 'react-router-dom';\nimport './App.css';\nimport Body from './SortingVisualizer/body/Body';\n\nfunction App() {\n  return (  \n    <BrowserRouter>\n     <Switch>\n      <Route path=\"/visual-sorting\" component={Body} />\n      <Redirect to=\"/visual-sorting\" />\n     </Switch>\n    </BrowserRouter>\n  );\n}\nexport default App;\n\n\n// <Switch>\n// <Route path=\"/:sort\" component={renderPage} />\n// <Route path=\"/\" component={renderPage}/>\n// </Switch>",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":44,"column":7,"nodeType":"35","endLine":44,"endColumn":9,"suggestions":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":42,"nodeType":"39","messageId":"40","endLine":2,"endColumn":48},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetArray'. Either include it or remove the dependency array.","ArrayExpression",["43"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"44","fix":"45"},"Update the dependencies array to be: [resetArray]",{"range":"46","text":"47"},[1511,1513],"[resetArray]"]